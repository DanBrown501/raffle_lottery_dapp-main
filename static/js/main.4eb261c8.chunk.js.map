{"version":3,"sources":["components/App.js","serviceWorker.js","index.js"],"names":["fromWei","str","Math","pow","toString","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","zeroAddress","ticketPrice","web3","account","ethBalance","feesEarned","numberTickets","totalWinnings","raffleLottery","raffleLotteryAddress","raffleId","totalTickets","feePercent","ticketsLeft","winningTicket","checkCorrect","availableWinnings","latestWinner","numTicketsBuy","winners","entries","loading","searchId","handleChange","bind","assertThisInitialized","handleSearchChange","enterRaffle","completeRaffle","getWinnerById","loadWeb3","loadBlockchainData","window","ethereum","on","accounts","location","reload","networkId","Web3","enable","setState","currentProvider","alert","eth","getAccounts","net","getId","networkData","RaffleLottery","networks","Contract","abi","address","methods","ticketNumber","ticketOwners","getBalance","getPastEvents","fromBlock","toBlock","winnerEvents","map","event","returnValues","entriesEvents","Array","from","reverse","filter","e","_entrant","_this2","target","value","isNaN","concat","send","once","_ref","asyncToGenerator","regenerator_default","a","mark","_callee6","receipt","wrap","_context6","prev","next","_this3","stop","_x2","apply","arguments","_ref2","_callee9","_context9","_this4","_x4","console","log","result","_this5","react_default","createElement","className","href","rel","Number","toFixed","Fragment","type","onChange","onClick","scope","w","_raffleId","_winner","_numberTickets","_winnings","round","role","disabled","Component","Boolean","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4eb261c8.chunk.js","sourcesContent":["import RaffleLottery from '../abis/RaffleLottery.json'\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\n\nconst fromWei = (str) => (+str / 10**18).toString()\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      zeroAddress: '0x0000000000000000000000000000000000000000',\n      ticketPrice: '',\n      web3: '',\n      account: '',\n      ethBalance: 0,\n      feesEarned: 0,\n      numberTickets: 0,\n      totalWinnings: 0,\n      raffleLottery: '',\n      raffleLotteryAddress: '',\n      raffleId: 0,\n      totalTickets: 0,\n      feePercent: 10,\n      ticketsLeft: '',\n      winningTicket: '',\n      checkCorrect: false,\n      availableWinnings: 0,\n      latestWinner: '',\n      numTicketsBuy: '',\n      winners: [],\n      entries: [],\n      loading: false,\n      searchId: ''\n  \n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleSearchChange = this.handleSearchChange.bind(this)\n    this.enterRaffle = this.enterRaffle.bind(this)\n    this.completeRaffle = this.completeRaffle.bind(this)\n    this.getWinnerById= this.getWinnerById.bind(this)\n  }\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async componentDidMount() {\n    window.ethereum.on('accountsChanged', function (accounts) {\n      window.location.reload();\n    })\n    \n    window.ethereum.on('networkChanged', function (networkId) {\n      window.location.reload();\n    })\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n      this.setState({web3: window.web3})\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      this.setState({web3: window.web3})\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    //await this.setState({loading: true})\n    const web3 = this.state.web3\n    // Load account\n    const accounts = await web3.eth.getAccounts()\n    await this.setState({ account: accounts[0] })\n    // Network ID\n    const networkId = await web3.eth.net.getId()\n    const networkData = RaffleLottery.networks[networkId]\n    if(networkData) {\n      // set connection to contract in state\n      const raffleLottery = new web3.eth.Contract(RaffleLottery.abi, networkData.address)\n      await this.setState({raffleLottery})\n      let raffleId, totalTickets, latestWinner, ticketNumber, ticketPrice, feesEarned,totalWinnings, numberTickets, feePercent, winningTicket, checkCorrect\n      if(this.state.raffleLottery) {\n        raffleId = await this.state.raffleLottery.methods.raffleId().call()\n        totalTickets = await this.state.raffleLottery.methods.totalTickets().call()\n        latestWinner = await this.state.raffleLottery.methods.latestWinner().call()\n        if(latestWinner === this.state.zeroAddress){ latestWinner = ''}\n        ticketNumber = await this.state.raffleLottery.methods.ticketNumber().call()\n        ticketPrice = await this.state.raffleLottery.methods.ticketPrice().call()\n        ticketPrice = ticketPrice.toString()\n        // load feesEarned from Raffle Lottery\n        feesEarned = await this.state.raffleLottery.methods.feesEarned(this.state.account).call()\n        feesEarned = fromWei(feesEarned.toString())\n        // load total winnings from Raffle Lottery\n        totalWinnings = await this.state.raffleLottery.methods.totalWinnings(this.state.account).call()\n        totalWinnings = fromWei(totalWinnings.toString())\n        // number tickets account in this raffle\n        numberTickets = await raffleLottery.methods.numberTickets(this.state.raffleId, this.state.account).call()\n        numberTickets = numberTickets.toString()\n        // get FeePercent\n        feePercent = await raffleLottery.methods.feePercent().call\n        feePercent = +(fromWei(feePercent.toString()))\n        // last winningTicket \n        winningTicket = await raffleLottery.methods.winningTicket().call()\n        winningTicket = winningTicket.toString()\n        // check correct winner \n        checkCorrect = await raffleLottery.methods.ticketOwners(winningTicket).call()\n        checkCorrect = checkCorrect === latestWinner\n      }\n      // load ETH Balance\n      let ethBalance  = await web3.eth.getBalance(this.state.account)\n      ethBalance = fromWei(ethBalance.toString())\n      await this.setState({raffleLotteryAddress: networkData.address})\n      // available winnings in contract\n      let availableWinnings = await this.state.web3.eth.getBalance(this.state.raffleLotteryAddress)\n      availableWinnings = +(fromWei(availableWinnings.toString())) \n      // update state\n      await this.setState({ raffleId })\n      await this.setState({ totalTickets })\n      await this.setState({ticketsLeft: totalTickets - ticketNumber})\n      await this.setState({ latestWinner })\n      await this.setState({ ticketNumber })\n      await this.setState({ ticketPrice })\n      await this.setState({ feesEarned })\n      await this.setState({ totalWinnings })\n      await this.setState({ ethBalance })\n      await this.setState({ numberTickets})\n      await this.setState({availableWinnings})\n      await this.setState({feePercent})\n      await this.setState({winningTicket})\n      await this.setState({checkCorrect})\n      // subscribe to events \n      const winners = await this.state.raffleLottery.getPastEvents('Winner', { fromBlock: 0, toBlock: 'latest' })\n      const entries = await this.state.raffleLottery.getPastEvents('Entered', {fromBlock: 0, toBlock: 'latest' })\n\n      const winnerEvents = winners.map(event => event.returnValues)\n      let entriesEvents = entries.map(event => event.returnValues)\n      \n      await this.setState({ winners : Array.from(winnerEvents).reverse()})\n      // filter for users account entries only \n      entriesEvents = entriesEvents.filter(e => e._entrant === this.state.account)\n      await this.setState({ entries: entriesEvents.reverse()})\n      // set loading false after getting from blockchain\n      await this.setState({ loading: false})\n    } else {\n      window.alert('RaffleLottery contract not deployed to detected network.')\n    }\n    \n  }\n\n  async handleChange(event) {\n    this.setState({numTicketsBuy: event.target.value})\n  }\n\n  async enterRaffle() {\n    if(isNaN(this.state.numTicketsBuy) || this.state.numTicketsBuy < 1 || this.state.numTicketsBuy > this.state.ticketsLeft) {\n      alert(`Enter valid number of tickets! Refer to number tickets left!`)\n    } else {\n      alert(`Buying ${this.state.numTicketsBuy} tickets!`)\n      const value = (+this.state.ticketPrice) * (+this.state.numTicketsBuy)\n      await this.setState({loading: true})\n      this.state.raffleLottery.methods.enterRaffle(this.state.numTicketsBuy).send({ from: this.state.account, value:value }).once('receipt', async (receipt) => {\n        await this.loadBlockchainData()\n      })\n    }\n  }\n\n  async handleSearchChange(event) {\n    this.setState({searchId: event.target.value})\n  }\n \n  async completeRaffle() {\n    alert('Closing current completed raffle')\n    if(this.state.ticketsLeft === 0 && this.state.numberTickets > 0) {\n      await this.setState({loading: true})\n      await this.state.raffleLottery.methods.completeRaffle().send({ from: this.state.account}).once('receipt', async (receipt) => {\n        await this.loadBlockchainData()\n      })\n    }\n  }\n\n  async getWinnerById() {\n    console.log('Searching')\n    if(this.state.searchId >= 0 && !(isNaN(this.state.searchId))) {\n      await this.setState({loading: true})\n      const result = await this.state.raffleLottery.methods.winners(this.state.searchId).call()\n      alert(result)\n      await this.setState({loading: false})\n    }\n  }\n\n  render() {\n\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"https://danbrown501.github.io/Resume/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Raffle Lottery Dapp: \n          </a>\n          <a\n              className=\"mr-5\"\n              href={`https://etherscan.io/address/${this.state.account}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n          >\n             Account: {this.state.account}\n          </a>\n          <a\n              className=\"mr-5\"\n              href=\"/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n          >\n             ETH Balance: {Number(this.state.ethBalance).toFixed(3)}\n          </a>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row border-right\">\n            <div className =\"col-sm-5 border-right\">\n            { this.state.loading ? \n                    <div> Loading....</div> :  \n                    <>\n                      <h4 className=\"mt-5\">Past Winners!</h4>\n                      <p>{`Raffle Lottery Address: ${this.state.raffleLotteryAddress}`}</p>\n                      <p>{`Last Winning Ticket: ${this.state.winningTicket} :: Check Correct: ${this.state.checkCorrect}`}</p>\n                      <p>{`Last Winner: ${this.state.latestWinner}`}</p>\n                      <hr/>\n                      <h4 className=\"mt-5\">Search Winner By Raffle ID:</h4>\n                      <input type=\"text\" value={this.state.searchId} onChange={this.handleSearchChange} />\n                      <button\n                        className=\"mt-5 btn btn-primary btn-lg\"\n                        onClick = {this.getWinnerById}\n                      >\n                        Find Winner!\n                      </button>\n                      <hr/>\n                      <div className=\"row justify-content-center\">\n                        <div className=\"col-auto\">\n                          <table className =\"table table-responsive m-auto\">\n                            <thead>\n                              <tr>\n                                <th scope=\"col\">Raffle ID</th>\n                                <th scope=\"col\">Winner</th>\n                                <th scope=\"col\">Tickets Bought</th>\n                                <th scope=\"col\">Winnings</th>\n                                <th scope=\"col\">Odds</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {\n                                this.state.winners.map(w => {\n                                  return (\n                                    <tr>\n                                      <td>{w._raffleId}</td>\n                                      <td>{w._winner}</td>\n                                      <td>{w._numberTickets.toString()}</td>\n                                      <td>{fromWei(w._winnings)}</td>\n                                      <td>{`${Math.round((w._numberTickets/ (this.state.totalTickets))*100)}%`}</td>\n                                    </tr>\n\n                                  )\n                                })\n                              }\n                            </tbody>\n                          </table>\n                        </div>\n                      </div>          \n                      <hr/>\n                    </>\n                }\n            </div>\n            <div className =\"col-sm-2 border-right\">\n              <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n                <div className=\"content mt-5 mr-auto ml-auto\">\n                  <h4>{`Enter Raffle: Tickets Left ${this.state.ticketsLeft}`}</h4>\n                  <div>\n                    <label>\n                      Number Tickets:\n                      <input type=\"text\" value={this.state.numTicketsBuy} onChange={this.handleChange} />\n                    </label>\n                    <button\n                      className=\"mt-5 btn btn-primary btn-lg\"\n                      onClick = {this.enterRaffle}\n                    >\n                      Enter Raffle\n                    </button>\n                  </div>\n                  \n                  <br/>\n                  <br/>\n                  <hr/>\n                  <h4>{`Current Raffle: ID - ${this.state.raffleId}`}</h4>\n                  <p>{`Available Winnings: ${this.state.availableWinnings}`}</p>\n                  <button\n                      className=\"mt-5 btn btn-primary btn-lg\"\n                      onClick = {this.completeRaffle}\n                      disabled = {!(+this.state.ticketsLeft === 0)}\n                    >\n                      Complete Raffle\n                    </button>\n                  <hr/>\n                  <br/>\n                  <br/>\n                  <a\n                    className=\"App-link\"\n                    href=\"https://danbrown501.github.io/Resume/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                  >\n                    CHECK OUT MORE OF MY WORK <u><b>HERE! </b></u>\n                  </a>\n                </div>\n              </main>\n            </div>\n            <div className =\"col-sm-5 border-right\" >\n              { this.state.loading ? \n                      <div> Loading....</div> :  \n                      <>\n                        <h4 className=\"mt-5\">Your Past Plays!</h4>\n                        <p>{`Total Fees Earned: ${this.state.feesEarned}`}</p>\n                        <p>{`Your Total Winnings Raffle Lotteries: ${this.state.totalWinnings}`}</p>\n                        <div className=\"row justify-content-center\">\n                          <div className=\"col-auto\">\n                          <table className =\"table table-responsive m-auto\">\n                            <thead>\n                              <tr>\n                                <th scope=\"col\">Raffle ID</th>\n                                <th scope=\"col\">Tickets Bought</th>\n                                <th scope=\"col\">Odds</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {\n                                  this.state.entries.map(e => {\n                                    return (\n                                      <tr>\n                                        <td>{e._raffleId}</td>\n                                        <td>{e._numberTickets}</td>\n                                        <td>{`${Math.round((e._numberTickets/ (this.state.totalTickets))*100)}%`}</td>\n                                      </tr>\n\n                                    )\n                                  })\n                                }\n                            </tbody>\n                          </table>\n                          </div>\n                        </div>          \n                        <hr/>\n                      </>\n                  }\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}